{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#project-layout","title":"Project layout","text":"<pre><code>NCv4_Firmware/    # The firmware project and influence engines\nTestbed_Server/   # The web ui and nodejs control server\n</code></pre>"},{"location":"firmware/InfluenceEngine/","title":"Influence Engine","text":""},{"location":"firmware/InfluenceEngine/#api-refrence","title":"API Refrence","text":""},{"location":"firmware/InfluenceEngine/#header-file","title":"Header File","text":"<pre><code>#include \"InfluenceEngine.h\"\n</code></pre>"},{"location":"firmware/Registry/","title":"Registry","text":""},{"location":"firmware/Registry/#description","title":"Description","text":"<p>A class for holding globally needed objects, to facilitate adding new influence engines and other generic modules</p>"},{"location":"firmware/Registry/#api-refrence","title":"API Refrence","text":""},{"location":"firmware/Registry/#header-file","title":"Header File","text":"<pre><code>#include \"Registry.h\"\n</code></pre>"},{"location":"firmware/Registry/#definition","title":"Definition","text":"<pre><code>class Registry;\n</code></pre>"},{"location":"firmware/Registry/#member-variables","title":"Member Variables","text":"<p><pre><code>list&lt;Actuator*&gt; actuators;\n</code></pre> growable list of actuators</p> <p><pre><code>string_map&lt;InfluenceEngine*&gt; engines;\n</code></pre> Mapping from an influence engine name to it's instance</p> <p><pre><code>string_map&lt;table&gt; tables;\n</code></pre> Mapping from an influence engine name to it's table of parameters</p>"},{"location":"firmware/lib/","title":"Library","text":""},{"location":"firmware/list/","title":"list","text":""},{"location":"firmware/list/#description","title":"Description","text":"<p>A growable list that acts similarly to <code>std::vector</code> but only depends on the c standard library not cpp</p> <p>It can be iterated over using a for each loop, and a refrence to items can be accessed using the <code>[]</code> operator</p>"},{"location":"firmware/list/#api-refrence","title":"API Refrence","text":""},{"location":"firmware/list/#header-file","title":"Header File","text":"<pre><code>#include \"lib.h\"\n</code></pre>"},{"location":"firmware/list/#definition","title":"Definition","text":"<pre><code>template&lt;typename T&gt; struct list;\n</code></pre>"},{"location":"firmware/list/#member-functions","title":"Member functions","text":"<p><pre><code>void push(T item);\n</code></pre> Allocates if space needed for <code>item</code> and adds <code>item</code> to the end of the list.</p> <p><pre><code>T* get(int index);\n</code></pre> Returns a pointer to the item at <code>index</code>.</p> <p><pre><code>void remove(int index);\n</code></pre> Removes the item at <code>index</code> from the list and moves items down to fill in the empty space.</p> <p><pre><code>int len();\n</code></pre> Returns the amount of items in the list.</p> <p><pre><code>void free();\n</code></pre> Deallocates the internal item storage, if <code>T</code> is dynamically allocated then each item must be freed, if the list structg is dynamically allocated then the caller is responsible for freeing that memory</p>"},{"location":"firmware/list/#examples","title":"Examples","text":"<pre><code>list&lt;int&gt; numbers;\nnumbers.push(12);\nnumbers.push(15);\nnumbers.push(7)\nnumbers.remove(1);\n// numbers: 12, 7\n\nbool is_true = numbers[1] == 7;\nbool is_also_true = *numbers.get(1) == 7;\n\nfor (int&amp; number : numbers) {\n  number = number*2;\n}\n// numbers: 24, 14\nnumbers[1] // 14\n</code></pre>"},{"location":"firmware/option/","title":"todo","text":""},{"location":"firmware/string_map/","title":"string_map","text":""},{"location":"firmware/string_map/#description","title":"Description","text":"<p>A structure for associating c string(<code>const char*</code>) with a value, allowing for storage and retrieval of the value</p>"},{"location":"firmware/string_map/#api-refrence","title":"API Refrence","text":""},{"location":"firmware/string_map/#header-file","title":"Header File","text":"<pre><code>#include \"lib.h\"\n</code></pre>"},{"location":"firmware/string_map/#definition","title":"Definition","text":"<pre><code>template&lt;typename T&gt; struct string_map;\n</code></pre>"},{"location":"firmware/string_map/#member-methods","title":"Member Methods","text":"<pre><code>void add(const char *key, T item);\n</code></pre>"},{"location":"firmware/table/","title":"Table","text":""},{"location":"firmware/table/#todo","title":"TODO","text":""},{"location":"web/hooks/","title":"Hooks","text":""},{"location":"web/observable/","title":"Observable","text":""},{"location":"web/observable/#api-refrence","title":"API Refrence","text":""},{"location":"web/observable/#observableinit-path","title":"<code>observable(init, path)</code>","text":"<pre><code>import { observable } from \"/libraries/observable.js\"\nfunction observable(init, path) {\n\n}\n</code></pre>"},{"location":"web/observable/#parameters","title":"Parameters","text":"Name Type Description init Object Object to add observation too, recursively wraps objects with a Proxy to ovveride the getter and setter path string Optional, if called with this parameter then all values set on this object will be synced to firebase"},{"location":"web/observable/#observestate-observer-key","title":"<code>observe(state, observer, key)</code>","text":"<pre><code>import { observe } from \"/libraries/observable.js\"\nfunction observe(state, observer, key) {}\n</code></pre>"},{"location":"web/observable/#parameters_1","title":"Parameters","text":"Name Type Description state observable Object to observe changes too observer <code>(state, fromDatabase, key, undoing) =&gt; void</code> function that will be called when a property of <code>state</code> changes key string Optional, if provided observer will only be called when the value of this property changes"},{"location":"web/observable/#return-value","title":"Return Value","text":"<p>Function to remove the observer</p>"},{"location":"web/observable/#observekeysstate-observer","title":"<code>observeKeys(state, observer)</code>","text":"<pre><code>import { observeKeys } from \"/libraries/observable.js\"\nexport function observeKeys(state, observer) {}\n</code></pre>"},{"location":"web/observable/#parameters_2","title":"Parameters","text":"Name Type Description state observable Object to observe key changes too observer <code>(state, key, fromDatabase, undoing) =&gt; void</code> function that will be called when properties are added or removed from <code>state</code>"},{"location":"web/observable/#return-value_1","title":"Return Value","text":"<p>Function to remove the observer</p>"},{"location":"web/observable/#getstate-path-last","title":"<code>get(state, path, last)</code>","text":"<pre><code>import { get } from \"/libraries/observable.js\"\nexport function get(state, path, last) {}\n</code></pre>"},{"location":"web/observable/#parameters_3","title":"Parameters","text":"Name Type Description state object path string deep path on <code>state</code> each property is delimetted by <code>.</code> for example <code>thing.colour</code> last any Optional, if provided will be used to set the last property if it is not undefined"}]}